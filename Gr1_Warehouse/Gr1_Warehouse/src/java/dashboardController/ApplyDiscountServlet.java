/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package dashboardController;

import dao.DiscountDAO;
import dao.OrderDAO;
import dao.OrderDiscountDAO;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Enumeration;
import java.util.List;
import model.Discounts;
import model.OrderDiscount;

/**
 *
 * @author Dell
 */
public class ApplyDiscountServlet extends HttpServlet {

    OrderDiscountDAO orderDiscountDAO = new OrderDiscountDAO();

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet ApplyDiscountServlet</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet ApplyDiscountServlet at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            int orderId = Integer.parseInt(request.getParameter("order_id"));

//            List<OrderDiscount> orderDiscounts = orderDiscountDAO.getDiscountsByOrderId(orderId);
//
//            request.setAttribute("orderDiscounts", orderDiscounts);
            request.getRequestDispatcher("/manager/export_good.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect("manager/export_good.jsp?error=true");
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        try (PrintWriter out = response.getWriter()) {
            System.out.println("üõ†Ô∏è [DEBUG] B·∫Øt ƒë·∫ßu ApplyDiscountServlet doPost");

            // L·∫•y order_id t·ª´ request
            String orderIdParam = request.getParameter("order_id");
            if (orderIdParam == null || orderIdParam.trim().isEmpty()) {
                out.write("{\"error\": \"order_id kh√¥ng h·ª£p l·ªá!\"}");
                return;
            }

            int orderId;
            try {
                orderId = Integer.parseInt(orderIdParam.trim());
            } catch (NumberFormatException e) {
                out.write("{\"error\": \"ƒê·ªãnh d·∫°ng order_id kh√¥ng h·ª£p l·ªá!\"}");
                return;
            }

            // Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ c√≥ m√£ gi·∫£m gi√°
            if (orderDiscountDAO.isDiscountApplied(orderId)) {
                out.write("{\"error\": \"ƒê∆°n h√†ng ƒë√£ √°p d·ª•ng m√£ gi·∫£m gi√° tr∆∞·ªõc ƒë√≥!\"}");
                return;
            }

            // L·∫•y ph·∫ßn trƒÉm gi·∫£m gi√° t·ª´ request v√† ki·ªÉm tra t√≠nh h·ª£p l·ªá
            String discountPercentageParam = request.getParameter("discount_percentage");
            if (discountPercentageParam == null || discountPercentageParam.trim().isEmpty()) {
                out.write("{\"error\": \"Vui l√≤ng nh·∫≠p ph·∫ßn trƒÉm gi·∫£m gi√°!\"}");
                return;
            }

            BigDecimal discountPercentage;
            try {
                discountPercentage = new BigDecimal(discountPercentageParam.trim());
                if (discountPercentage.compareTo(BigDecimal.ZERO) <= 0 || discountPercentage.compareTo(new BigDecimal("100")) > 0) {
                    out.write("{\"error\": \"Ph·∫ßn trƒÉm gi·∫£m gi√° ph·∫£i t·ª´ 0% ƒë·∫øn 100%!\"}");
                    return;
                }
            } catch (NumberFormatException e) {
                out.write("{\"error\": \"ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!\"}");
                return;
            }

            System.out.println("üõ†Ô∏è [DEBUG] order_id: " + orderId + ", discount_percentage: " + discountPercentage);

            // L·∫•y t·ªïng ti·ªÅn tr∆∞·ªõc gi·∫£m gi√°
            BigDecimal totalBeforeDiscount = orderDiscountDAO.getTotalAmount(orderId);
            if (totalBeforeDiscount.compareTo(BigDecimal.ZERO) <= 0) {
                out.write("{\"error\": \"T·ªïng ti·ªÅn ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!\"}");
                return;
            }

            // √Åp d·ª•ng quy t·∫Øc gi·∫£m gi√° theo gi√° tr·ªã ƒë∆°n h√†ng
            BigDecimal appliedAmount = totalBeforeDiscount.multiply(discountPercentage.divide(new BigDecimal("100")));

// Ki·ªÉm tra quy t·∫Øc gi·∫£m gi√° theo gi√° tr·ªã ƒë∆°n h√†ng
            if (totalBeforeDiscount.compareTo(new BigDecimal("10000000")) < 0) {  // ƒê∆°n h√†ng d∆∞·ªõi 10 tri·ªáu
                // Ki·ªÉm tra ph·∫ßn trƒÉm gi·∫£m gi√°, n·∫øu v∆∞·ª£t qu√° 5% th√¨ y√™u c·∫ßu nh·∫≠p l·∫°i
                if (discountPercentage.compareTo(new BigDecimal("5")) > 0) {
                    out.write("{\"error\": \"Gi·∫£m gi√° t·ªëi ƒëa cho ƒë∆°n h√†ng d∆∞·ªõi 10 tri·ªáu l√† 5%. Vui l√≤ng nh·∫≠p l·∫°i ph·∫ßn trƒÉm gi·∫£m gi√°!\"}");
                    return;
                }
                discountPercentage = discountPercentage.min(new BigDecimal("5"));
            } else if (totalBeforeDiscount.compareTo(new BigDecimal("10000000")) >= 0 && totalBeforeDiscount.compareTo(new BigDecimal("50000000")) <= 0) {  // ƒê∆°n h√†ng t·ª´ 10-50 tri·ªáu
                // Ki·ªÉm tra ph·∫ßn trƒÉm gi·∫£m gi√°, n·∫øu v∆∞·ª£t qu√° 15% th√¨ y√™u c·∫ßu nh·∫≠p l·∫°i
                if (discountPercentage.compareTo(new BigDecimal("15")) > 0) {
                    out.write("{\"error\": \"Gi·∫£m gi√° t·ªëi ƒëa cho ƒë∆°n h√†ng t·ª´ 10-50 tri·ªáu l√† 15%. Vui l√≤ng nh·∫≠p l·∫°i ph·∫ßn trƒÉm gi·∫£m gi√°!\"}");
                    return;
                }
                discountPercentage = discountPercentage.min(new BigDecimal("15"));
            } else if (totalBeforeDiscount.compareTo(new BigDecimal("50000000")) > 0) {  // ƒê∆°n h√†ng tr√™n 50 tri·ªáu
                // Ki·ªÉm tra ph·∫ßn trƒÉm gi·∫£m gi√°, n·∫øu v∆∞·ª£t qu√° 20% th√¨ y√™u c·∫ßu nh·∫≠p l·∫°i
                if (discountPercentage.compareTo(new BigDecimal("20")) > 0) {
                    out.write("{\"error\": \"Gi·∫£m gi√° t·ªëi ƒëa cho ƒë∆°n h√†ng tr√™n 50 tri·ªáu l√† 20%. Vui l√≤ng nh·∫≠p l·∫°i ph·∫ßn trƒÉm gi·∫£m gi√°!\"}");
                    return;
                }
                discountPercentage = discountPercentage.min(new BigDecimal("20"));
            }

            // T√≠nh l·∫°i s·ªë ti·ªÅn gi·∫£m gi√° sau khi √°p d·ª•ng gi·ªõi h·∫°n ph·∫ßn trƒÉm
            appliedAmount = totalBeforeDiscount.multiply(discountPercentage.divide(new BigDecimal("100")));
            System.out.println("üõ†Ô∏è [DEBUG] S·ªë ti·ªÅn gi·∫£m gi√° √°p d·ª•ng: " + appliedAmount);

            // Ki·ªÉm tra s·ªë ti·ªÅn gi·∫£m gi√° t·ªëi ƒëa (V√≠ d·ª•: kh√¥ng v∆∞·ª£t qu√° 5 tri·ªáu cho ƒë∆°n h√†ng 100 tri·ªáu)
            if (totalBeforeDiscount.compareTo(new BigDecimal("100000000")) >= 0 && appliedAmount.compareTo(new BigDecimal("5000000")) > 0) {
                appliedAmount = new BigDecimal("5000000");
                System.out.println("üõ†Ô∏è [DEBUG] ƒê∆°n h√†ng tr√™n 100 tri·ªáu, gi·∫£m gi√° t·ªëi ƒëa 5 tri·ªáu");
            }

            // L∆∞u th√¥ng tin gi·∫£m gi√° v√†o ƒë∆°n h√†ng
            OrderDiscount orderDiscount = new OrderDiscount();
            orderDiscount.setOrderId(orderId);
            orderDiscount.setAppliedDiscountPercentage(discountPercentage.doubleValue());
            orderDiscount.setAppliedAmount(appliedAmount);
            orderDiscount.setAppliedDate(LocalDateTime.now());

            orderDiscountDAO.insertOrderDiscount(orderDiscount);
            System.out.println("‚úÖ Discount ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database");

            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn sau gi·∫£m gi√°
            orderDiscountDAO.updateTotalAfterDiscount(orderId);
            BigDecimal newTotal = orderDiscountDAO.getTotalAmount(orderId); // Thay th·∫ø double b·∫±ng BigDecimal
            System.out.println("‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn sau gi·∫£m gi√° th√†nh c√¥ng: " + newTotal);

            // Tr·∫£ v·ªÅ t·ªïng ti·ªÅn m·ªõi sau khi gi·∫£m gi√°
            out.write("{\"success\": \"√Åp d·ª•ng gi·∫£m gi√° th√†nh c√¥ng! T·ªïng ti·ªÅn m·ªõi: " + newTotal + "\"}");

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói x·∫£y ra: " + e.getMessage());
            response.getWriter().write("{\"error\": \"C√≥ l·ªói x·∫£y ra khi √°p d·ª•ng gi·∫£m gi√°!\"}");
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
